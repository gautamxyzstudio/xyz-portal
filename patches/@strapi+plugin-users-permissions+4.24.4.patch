diff --git a/node_modules/@strapi/plugin-users-permissions/server/controllers/auth.js b/node_modules/@strapi/plugin-users-permissions/server/controllers/auth.js
index ce98e7d..96b0ff7 100644
--- a/node_modules/@strapi/plugin-users-permissions/server/controllers/auth.js
+++ b/node_modules/@strapi/plugin-users-permissions/server/controllers/auth.js
@@ -311,32 +311,32 @@ module.exports = {
         alwaysAllowedKeys,
         isArray(register?.allowedFields)
           ? // Note that we do not filter allowedFields in case a user explicitly chooses to allow a private or otherwise omitted field on registration
-            register.allowedFields // if null or undefined, compact will remove it
+          register.allowedFields // if null or undefined, compact will remove it
           : // to prevent breaking changes, if allowedFields is not set in config, we only remove private and known dangerous user schema fields
-            // TODO V5: allowedFields defaults to [] when undefined and remove this case
-            Object.keys(attributes).filter(
-              (key) =>
-                !nonWritable.includes(key) &&
-                !attributes[key].private &&
-                ![
-                  // many of these are included in nonWritable, but we'll list them again to be safe and since we're removing this code in v5 anyway
-                  // Strapi user schema fields
-                  'confirmed',
-                  'blocked',
-                  'confirmationToken',
-                  'resetPasswordToken',
-                  'provider',
-                  'id',
-                  'role',
-                  // other Strapi fields that might be added
-                  'createdAt',
-                  'updatedAt',
-                  'createdBy',
-                  'updatedBy',
-                  'publishedAt', // d&p
-                  'strapi_reviewWorkflows_stage', // review workflows
-                ].includes(key)
-            )
+          // TODO V5: allowedFields defaults to [] when undefined and remove this case
+          Object.keys(attributes).filter(
+            (key) =>
+              !nonWritable.includes(key) &&
+              !attributes[key].private &&
+              ![
+                // many of these are included in nonWritable, but we'll list them again to be safe and since we're removing this code in v5 anyway
+                // Strapi user schema fields
+                'confirmed',
+                'blocked',
+                'confirmationToken',
+                'resetPasswordToken',
+                'provider',
+                'id',
+                'role',
+                // other Strapi fields that might be added
+                'createdAt',
+                'updatedAt',
+                'createdBy',
+                'updatedBy',
+                'publishedAt', // d&p
+                'strapi_reviewWorkflows_stage', // review workflows
+              ].includes(key)
+          )
       )
     );
 
@@ -346,7 +346,13 @@ module.exports = {
     };
 
     await validateRegisterBody(params);
-
+    const { role: roleName } = ctx.request.body;
+    let userRole;
+    if (roleName && roleName !== 'admin') {
+      userRole = await strapi.query('plugin::users-permissions.role').findOne({ where: { name: roleName } });
+    } if (!userRole) {
+      userRole = await strapi.query('plugin::users-permissions.role').findOne({ where: { type: settings.default_role } });
+    }
     const role = await strapi
       .query('plugin::users-permissions.role')
       .findOne({ where: { type: settings.default_role } });
@@ -386,7 +392,7 @@ module.exports = {
 
     const newUser = {
       ...params,
-      role: role.id,
+      role: userRole.id,
       email: email.toLowerCase(),
       username,
       confirmed: !settings.email_confirmation,
